// Get elements
const video = document.getElementById('camera');
const preview = document.getElementById('preview');
const startBtn = document.getElementById('startBtn');
const analyzeBtn = document.getElementById('analyzeBtn');
const uploadBtn = document.getElementById('uploadBtn');
const fileInput = document.getElementById('fileInput');
const probabilityBar = document.getElementById('probabilityBar');
const probabilityText = document.getElementById('probabilityText');
const resultDetails = document.getElementById('resultDetails');

// Setup Roboflow
const rf = new Roboflow({
    api_key: "DIggXL01Uhbk48cAXu3V"
});
let model;

// Load model
async function loadModel() {
    model = await rf.detect({
        model: "stroke-aware-bell-s-palsy-pjbqz",
        version: 7
    });
    resultDetails.textContent = "Ready to analyze photos";
}

// Start camera
startBtn.addEventListener('click', async () => {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        video.srcObject = stream;
        analyzeBtn.disabled = false;
        resultDetails.textContent = "Camera ready - Click 'Check Probability'";
    } catch (err) {
        resultDetails.textContent = "Error: " + err.message;
    }
});

// Capture and analyze
analyzeBtn.addEventListener('click', async () => {
    const canvas = document.createElement('canvas');
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    canvas.getContext('2d').drawImage(video, 0, 0);
    
    preview.src = canvas.toDataURL();
    preview.style.display = 'block';
    video.style.display = 'none';
    
    await analyzePhoto(canvas);
});

// Upload photo
uploadBtn.addEventListener('click', () => fileInput.click());
fileInput.addEventListener('change', async (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    const img = new Image();
    img.onload = async () => {
        const canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;
        canvas.getContext('2d').drawImage(img, 0, 0);
        
        preview.src = URL.createObjectURL(file);
        preview.style.display = 'block';
        video.style.display = 'none';
        
        await analyzePhoto(canvas);
    };
    img.src = URL.createObjectURL(file);
});

// Analyze photo and show probability
async function analyzePhoto(canvas) {
    resultDetails.textContent = "Analyzing...";
    
    try {
        const predictions = await model.detect(canvas);
        
        if (predictions.length === 0) {
            updateProbability(0);
            resultDetails.textContent = "No face detected in photo";
            return;
        }
        
        // Find Bell's Palsy prediction
        const bpPrediction = predictions.find(p => p.class === "Bell-palsy");
        const probability = bpPrediction ? bpPrediction.confidence * 100 : 0;
        
        updateProbability(probability);
        
        // Set result message
        if (probability > 70) {
            resultDetails.innerHTML = `
                <strong>High probability of Bell's Palsy</strong><br>
                We recommend consulting a healthcare professional
            `;
        } else if (probability > 30) {
            resultDetails.innerHTML = `
                <strong>Moderate probability of Bell's Palsy</strong><br>
                Consider monitoring symptoms or consulting a doctor
            `;
        } else {
            resultDetails.innerHTML = `
                <strong>Low probability of Bell's Palsy</strong><br>
                No significant facial asymmetry detected
            `;
        }
    } catch (err) {
        resultDetails.textContent = "Analysis failed: " + err.message;
        updateProbability(0);
    }
}

// Update probability display
function updateProbability(percent) {
    const roundedPercent = Math.round(percent);
    probabilityBar.style.width = `${roundedPercent}%`;
    probabilityText.textContent = `${roundedPercent}% probability of Bell's Palsy`;
    
    // Color coding
    if (percent > 70) {
        probabilityText.style.color = '#ea4335'; // Red
    } else if (percent > 30) {
        probabilityText.style.color = '#fbbc05'; // Yellow
    } else {
        probabilityText.style.color = '#34a853'; // Green
    }
}

// Initialize
loadModel();